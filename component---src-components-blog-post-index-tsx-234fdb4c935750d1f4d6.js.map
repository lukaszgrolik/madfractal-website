{"version":3,"sources":["webpack:///./src/components/blog-post/post-preview/styled.ts","webpack:///./src/components/blog-post/post-preview/videos/styled.ts","webpack:///./src/components/blog-post/post-preview/videos/index.tsx","webpack:///./src/components/popup/styled.ts","webpack:///./src/components/popup/index.tsx","webpack:///./src/components/blog-post/post-preview/screenshots/styled.ts","webpack:///./src/components/blog-post/post-preview/screenshots/index.tsx","webpack:///./src/components/blog-post/prev-next-posts/styled.ts","webpack:///./src/components/blog-post/prev-next-posts/index.tsx","webpack:///./src/components/blog-post/post-preview/index.tsx","webpack:///./src/components/blog-post/index.tsx"],"names":["Wrapper","styled","div","MainContent","Header","Body","Title","h2","Date","Excerpt","EmbedVideoBlock","Footer","ItemsGroupsWrapper","ItemsGroupTitle","h3","ItemsGroupDescription","p","ItemsGroupGrid","props","col","VideosList","ul","VideoItem","VideoDescription","VideoBlock","link","includes","src","frameBorder","scrolling","allowFullScreen","width","height","gfycatName","split","controls","muted","poster","type","ext","pop","alt","Videos","frontmatter","post","gifItemsGroups","length","map","group","key","title","description","gifItems","gif","gifItem","CloseButton","button","Popup","handleOnClose","children","ref","useCallback","node","focus","className","tabIndex","onKeyDown","e","keyCode","onClick","Screenshot","Screenshots","useState","isActive","images","activeImage","imagesSliderState","setImagesSliderState","data","allFile","allScreenshots","image","childImageSharp","absolutePath","fluid","screenshotsGroups","screenshotsGroup","screenshots","filter","screenshot","RenderScreenshot","screenshotGroupSrc","sg","style","maxWidth","PostThumbnail","Link","img","PostBlock","posts","currentPostIndex","isPrev","edges","matchResultDate","date","match","path","thumbnail","PrevNextPosts","currentPost","edge","id","indexOf","currentPostIsFirst","currentPostIsLast","PostPreview","html","dangerouslySetInnerHTML","__html","video","BackgroundImage","query","BlogPost","site","Helmet","siteMetadata","backgroundImage","background","padding"],"mappings":"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","file":"component---src-components-blog-post-index-tsx-234fdb4c935750d1f4d6.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 52em;\n  font-family: 'Lato', sans-serif;\n  /* box-shadow: 0 0 2em rgba(0, 0, 0, .75); */\n`;\nexport const MainContent = styled.div`\n  /* box-shadow: 0 0 1em rgba(0, 0, 0, .5); */\n  box-shadow: 0 0 1em rgba(0, 0, 0, .75);\n`;\n\nexport const Header = styled.div`\n  /* height: 400px; */\n  /* background-repeat: no-repeat;\n  background-size: cover;\n  background-position: center center; */\n\n  img {\n    width: 100%;\n    display: block;\n  }\n`;\n\nexport const Body = styled.div`\n  background-color: #fff;\n  padding: 3em;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 0;\n  font-size: 32px;\n`;\n\nexport const Date = styled.div`\n  font-size: 16px;\n  margin-top: 1em;\n  margin-bottom: 30px;\n  color: #333;\n`;\n\nexport const Excerpt = styled.div`\n  font-size: 20px;\n  line-height: 1.4;\n\n  p, ul {\n    &:not(:first-child) {\n      margin-top: 1em;\n    }\n  }\n\n  ul {\n    list-style: disc;\n    padding-left: 1em;\n  }\n`;\n\nexport const EmbedVideoBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 30px;\n  margin-top: 30px;\n`;\n\nexport const Footer = styled.div`\n  margin-top: 5em;\n\n  > * + * {\n    margin-top: 2em;\n  }\n\n  h2 {\n    color: rgba(255, 255, 255, .75);\n    font-size: 2.5em;\n    text-align: center;\n    text-shadow: 0 0 3px #000;\n  }\n`;\n\n\n// Items groups\n\nexport const ItemsGroupsWrapper = styled.div`\n  margin-top: 50px;\n`;\n\nexport const ItemsGroupTitle = styled.h3`\n  font-size: 28px;\n  /* font-weight: bold; */\n  padding-bottom: .5em;\n  border-bottom: 1px solid #ddd;\n  margin-bottom: 20px;\n`;\n\nexport const ItemsGroupDescription = styled.p`\n  margin-bottom: 30px;\n  line-height: 1.25;\n`;\n\nexport const ItemsGroupGrid = styled.div<{col: number}>`\n  display: grid;\n  grid-template-columns: repeat(${props => props.col}, 1fr);\n  grid-gap: 10px;\n`;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  /* display: flex;\n  flex-direction: column;\n  align-items: center; */\n  margin-bottom: 30px;\n\n  img,\n  video {\n    max-width: 500px;\n    width: 100%;\n  }\n`;\n\nexport const VideosList = styled.ul`\n  > * + * {\n    margin-top: 1.5em;\n  }\n`;\n\nexport const VideoItem = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  color: #777;\n  font-style: italic;\n  text-align: center;\n\n  > * + * {\n    margin-top: .5em;\n  }\n`;\n\nexport const VideoDescription = styled.div`\n  line-height: 1.25;\n`;","import React from 'react';\n\nimport { Post } from '../../../../common/types/post';\n\nimport {\n  ItemsGroupsWrapper,\n  ItemsGroupTitle,\n  ItemsGroupDescription,\n  ItemsGroupGrid,\n} from '../styled';\nimport { Wrapper, VideosList, VideoItem, VideoDescription } from './styled';\n\nconst VideoBlock = (props: { link: string }) => {\n  const { link } = props;\n  const isGfycat = link.includes('gfycat.com');\n\n  if (isGfycat) {\n    const isGfycatIframe = link.includes('gfycat.com/ifr');\n\n    if (isGfycatIframe) {\n      return (\n        <iframe\n          src={link}\n          frameBorder=\"0\"\n          scrolling=\"no\"\n          allowFullScreen\n          width=\"640\"\n          height=\"404\"\n        ></iframe>\n      );\n    } else {\n      const arr = link.split('/');\n      const gfycatName = arr[1];\n      if (!gfycatName) return null;\n\n      return (\n        <video\n          controls={true}\n          muted={true}\n          poster={`https://thumbs.gfycat.com/${gfycatName}-mobile.jpg`}\n        >\n          <source\n            src={`https://thumbs.gfycat.com/${gfycatName}-mobile.mp4`}\n            type=\"video/mp4\"\n          />\n          <source\n            src={`https://giant.gfycat.com/${gfycatName}.webm`}\n            type=\"video/webm\"\n          />\n          <source\n            src={`https://giant.gfycat.com/${gfycatName}.mp4`}\n            type=\"video/mp4\"\n          />\n          {/* duplicate? */}\n          <source\n            src={`https://thumbs.gfycat.com/${gfycatName}-mobile.mp4`}\n            type=\"video/mp4\"\n          />\n        </video>\n      );\n    }\n  } else {\n    const ext = link.split('.').pop();\n\n    if (ext === 'gif') {\n      return <img src={link} alt=\"\" />;\n    } else if (ext === 'mp4') {\n      return <video src={link} controls={true} muted={true} />;\n    } else {\n      return null;\n    }\n  }\n};\n\nconst Videos = (props: { post: Post }) => {\n  const { post } = props;\n  const { frontmatter } = post;\n\n  return (\n    <Wrapper>\n      {\n        frontmatter.gifItemsGroups && frontmatter.gifItemsGroups.length > 0\n        &&\n        frontmatter.gifItemsGroups.map(group => (\n          <ItemsGroupsWrapper key={group.title}>\n            <ItemsGroupTitle>{group.title}</ItemsGroupTitle>\n\n            <ItemsGroupDescription>{group.description}</ItemsGroupDescription>\n\n            {/* <ItemsGroupGrid col={2}> */}\n              <VideosList>\n                {\n                  group.gifItems.map(gif => {\n                    const link = gif.src;\n\n                    return (\n                      <li key={link}>\n                        <VideoItem>\n                          <div>\n                            <VideoBlock link={link} />\n                          </div>\n\n                          {gif.description && (\n                            <VideoDescription>{gif.description}</VideoDescription>\n                          )}\n                        </VideoItem>\n                      </li>\n                    );\n                  })\n                }\n              </VideosList>\n            {/* </ItemsGroupGrid> */}\n          </ItemsGroupsWrapper>\n        ))\n      }\n\n      {\n        frontmatter.gifItems && frontmatter.gifItems.length > 0\n        &&\n        <VideosList>\n          {\n            frontmatter.gifItems.map(gifItem => {\n              const link = gifItem.src;\n              const description = gifItem.description && gifItem.description;\n\n              return (\n                <li key={link}>\n                  <VideoItem>\n                    <div>\n                      <VideoBlock link={link} />\n                    </div>\n\n                    {description && <p>{description}</p>}\n                  </VideoItem>\n                </li>\n              );\n            })\n          }\n        </VideosList>\n      }\n    </Wrapper>\n  );\n};\n\nexport default Videos;\n","import styled from 'styled-components';\nimport 'slick-carousel/slick/slick.css';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.9);\n  z-index: 20;\n`;\n\nconst ButtonStyles = `\n  background-color: transparent;\n  border: none;\n  color: #fff;\n  font-size: 30px;\n  cursor: pointer;\n  position: absolute;\n  display: flex !important;\n  padding: 15px;\n  background-color: rgba(255, 255, 255, 0.1);\n  border-radius: 100%;\n  transition-duration: 200ms;\n  z-index: 10;\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.2);\n  }\n`;\n\nexport const CloseButton = styled.button`\n  ${ButtonStyles};\n  top: 20px;\n  right: 20px;\n`;","import React, { useCallback } from 'react';\nimport { MdClose } from 'react-icons/md';\n\nimport { Wrapper, CloseButton } from './styled';\n\ninterface Props {\n  handleOnClose: () => void;\n  children: React.ReactNode;\n}\n\nconst useHookWithRefCallback = () => {\n  const setRef = useCallback(node => {\n    if (node) {\n      node.focus();\n    }\n  }, []);\n\n  return [setRef];\n};\n\nconst Popup = ({ handleOnClose, children }: Props) => {\n  const [ref] = useHookWithRefCallback();\n\n  return (\n    <Wrapper\n      ref={ref}\n      className=\"popup\"\n      tabIndex={0}\n      // onClick={e => {\n      //   const target = e.target as Element;\n      //   if (target.classList.contains('popup')) {\n      //     handleOnClose();\n      //   }\n      // }}\n      onKeyDown={e => {\n        if (e.keyCode === 27) {\n          handleOnClose();\n        }\n      }}\n    >\n      <CloseButton onClick={() => handleOnClose()}>\n        <MdClose />\n      </CloseButton>\n      {children}\n    </Wrapper>\n  );\n};\n\nexport default Popup;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  justify-content: center;\n`;\n\nexport const ScreenshotsGroup = styled.div`\n  margin-top: 50px;\n`;\n\nexport const ScreenshotsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-gap: 10px;\n`;\n\nexport const ScreenshotsGroupTitle = styled.h3`\n  font-size: 17px;\n  font-weight: bold;\n  margin-bottom: 20px;\n`;\n\nexport const ScreenshotsGroupDescription = styled.p`\n  margin-bottom: 30px;\n`;\n\nexport const Screenshot = styled.div`\n  cursor: pointer;\n\n  img {\n    width: 100%;\n  }\n`;","import React, { useState } from 'react';\n\nimport { QueryData } from '../../../../common/types/query-data';\nimport Popup from '../../../popup';\nimport ImagesSlider from '../../../images-slider';\n\nimport {\n  ItemsGroupsWrapper,\n  ItemsGroupTitle,\n  ItemsGroupDescription,\n  ItemsGroupGrid,\n} from '../styled';\nimport { Wrapper, Screenshot } from './styled';\n\ninterface SliderState {\n  isActive: boolean;\n  images: { src: string; absolutePath: string }[] | null;\n  activeImage: string;\n}\n\nconst Screenshots = (props: { data: QueryData }) => {\n  const [imagesSliderState, setImagesSliderState] = useState<SliderState>({\n    isActive: false,\n    images: null,\n    activeImage: '',\n  });\n\n  const { data } = props;\n  const { post, allFile } = data;\n  const { frontmatter } = post;\n  const allScreenshots = allFile.images.map(image => {\n    const { childImageSharp, absolutePath } = image.image;\n    return { src: childImageSharp.fluid.src, absolutePath: absolutePath };\n  });\n  const screenshotsGroups =\n    frontmatter.screenshotsGroups &&\n    frontmatter.screenshotsGroups.map(screenshotsGroup => ({\n      screenshotsGroup,\n      screenshots: allScreenshots.filter(screenshot =>\n        screenshot.absolutePath.includes(screenshotsGroup.src)\n      ),\n    }));\n\n  const RenderScreenshot = (\n    screenshot: { src: string; absolutePath: string },\n    screenshotGroupSrc?: string\n  ) => (\n    <Screenshot\n      key={screenshot.src}\n      onClick={() => {\n        const images = allScreenshots.filter(screenshot => {\n          return screenshot.absolutePath.includes(screenshotGroupSrc || '')\n        });\n\n        setImagesSliderState({\n          isActive: true,\n          images,\n          activeImage: screenshot.src,\n        });\n      }}\n    >\n      <img src={screenshot.src} className=\"lazyload\" alt=\"Screenshot\" />\n    </Screenshot>\n  );\n\n  return (\n    <Wrapper>\n      {screenshotsGroups ? (\n        screenshotsGroups.map(sg => (\n          <ItemsGroupsWrapper key={sg.screenshotsGroup.src}>\n            <ItemsGroupTitle>{sg.screenshotsGroup.title}</ItemsGroupTitle>\n\n            <ItemsGroupDescription>\n              {sg.screenshotsGroup.description}\n            </ItemsGroupDescription>\n\n            <ItemsGroupGrid col={3}>\n              {\n                sg.screenshots.map(screenshot => {\n                  return RenderScreenshot(screenshot, sg.screenshotsGroup.src);\n                })\n              }\n            </ItemsGroupGrid>\n          </ItemsGroupsWrapper>\n        ))\n      ) : (\n        <ItemsGroupGrid col={3}>\n          {allScreenshots.map(screenshot => RenderScreenshot(screenshot))}\n        </ItemsGroupGrid>\n      )}\n\n      {imagesSliderState.isActive && (\n        <Popup\n          handleOnClose={() => {\n            setImagesSliderState({\n              isActive: false,\n              images: [{ src: '', absolutePath: '' }],\n              activeImage: '',\n            });\n          }}\n        >\n          <div style={{maxWidth: '1280px'}}>\n            <ImagesSlider\n              images={\n                imagesSliderState.images\n                  ? imagesSliderState.images.map(image => image.src)\n                  : []\n              }\n              activeImage={imagesSliderState.activeImage}\n            />\n          </div>\n        </Popup>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Screenshots;\n","import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n\n  > * + * {\n    margin-left: 2em;\n  }\n`;\n\nexport const PostLink = styled(Link)`\n  width: 180px;\n  text-align: center;\n  margin: 10px;\n`;\n\nexport const PostThumbnail = styled.img`\n  width: 100%;\n`;","import React, { useEffect, useState } from 'react';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { Post } from '../../../common/types/post';\n\nimport { Wrapper, PostThumbnail } from './styled';\nimport {PostPreviewBlock} from '../../post-preview-block';\n\ninterface PostProps {\n  posts: Posts['posts'];\n  currentPostIndex: number;\n  isPrev: boolean;\n}\n\nconst PostBlock: React.FunctionComponent<PostProps> = (props) => {\n  const {posts, currentPostIndex, isPrev} = props;\n  const post = posts.edges[currentPostIndex + (isPrev ? -1 : 1)];\n  const matchResultDate = post.node.frontmatter.date.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\n  if (!matchResultDate) return null;\n  const [_, year, month] = matchResultDate;\n  const path = `/blog/${year}/${month}${post.node.frontmatter.path}`;\n\n  return (\n    <PostPreviewBlock post={post.node}>\n      <p>{isPrev ? 'previous post' : 'next post'}</p>\n      <PostThumbnail src={post.node.frontmatter.thumbnail.childImageSharp.fluid.src} alt='Post thumbnail' />\n      <p>{post.node.frontmatter.title}</p>\n    </PostPreviewBlock>\n  );\n};\n\ninterface Posts {\n  posts: { edges: { node: Post }[] };\n}\n\ninterface Props {\n  currentPost: Post\n}\n\nconst PrevNextPosts: React.FunctionComponent<Props> = (props) => {\n  const { posts }: Posts = useStaticQuery(graphql`\n      query {\n          posts: allMarkdownRemark(\n              sort: { fields: [frontmatter___date], order: ASC }\n              filter: { fileAbsolutePath: { regex: \"/posts/\" } }\n          ) {\n              edges {\n                  node {\n                      id\n                      frontmatter {\n                          date\n                          path\n                          title\n                          thumbnail {\n                              childImageSharp {\n                                  fluid {\n                                      ...GatsbyImageSharpFluid\n                                  }\n                              }\n                          }\n                      }\n                  }\n              }\n          }\n      }\n  `);\n  const currentPost = posts.edges.filter(edge => edge.node.id === props.currentPost.id)[0];\n  const currentPostIndex = posts.edges.indexOf(currentPost)\n  const currentPostIsFirst = currentPostIndex === 0;\n  const currentPostIsLast = currentPostIndex === posts.edges.length - 1;\n\n  return (\n    <Wrapper>\n      {\n        !currentPostIsLast\n        &&\n        <PostBlock posts={posts} currentPostIndex={currentPostIndex} isPrev={false} />\n      }\n\n      {\n        !currentPostIsFirst\n        &&\n        <PostBlock posts={posts} currentPostIndex={currentPostIndex} isPrev={true} />\n      }\n    </Wrapper>\n  );\n};\n\nexport default PrevNextPosts;","import React from 'react';\n\nimport { QueryData } from '../../../common/types/query-data';\n\nimport Videos from './videos';\nimport Screenshots from './screenshots';\nimport {\n  Wrapper,\n  MainContent,\n  Header,\n  Body,\n  Title,\n  Date,\n  Excerpt,\n  EmbedVideoBlock,\n  Footer,\n} from './styled';\nimport PrevNextPosts from '../prev-next-posts';\n\nconst PostPreview = (props: {data: QueryData}) => {\n  const { data } = props;\n  const { post } = data;\n  const { frontmatter, html } = post;\n\n  return (\n    <Wrapper>\n      {/* <Header style={{backgroundImage: `url(${frontmatter.thumbnail.childImageSharp.fluid.src})`}}> */}\n      <MainContent>\n        <Header>\n          <img src={frontmatter.thumbnail.childImageSharp.fluid.src} alt=\"\"/>\n        </Header>\n\n        <Body>\n          <Title>{frontmatter.title}</Title>\n          <Date>{frontmatter.date}</Date>\n          <Excerpt dangerouslySetInnerHTML={{ __html: html }} />\n\n          {\n            frontmatter.video\n            &&\n            <EmbedVideoBlock>\n              <iframe\n                title=\"Post video\"\n                width=\"560\"\n                height=\"315\"\n                src={frontmatter.video}\n                frameBorder=\"0\"\n                // allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n              />\n            </EmbedVideoBlock>\n          }\n\n          <Videos post={post} />\n          <Screenshots data={data} />\n        </Body>\n      </MainContent>\n\n      <Footer>\n        <div>\n          <h2>Read more:</h2>\n        </div>\n\n        <div>\n          <PrevNextPosts currentPost={post} />\n        </div>\n      </Footer>\n    </Wrapper>\n  );\n};\n\nexport default PostPreview;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\nimport styled from 'styled-components';\n\nimport { WideLayout } from '../layout';\nimport PostPreview from './post-preview';\nimport { QueryData } from '../../common/types/query-data';\n\nconst Wrapper = styled.div`\n`;\nconst BackgroundImage = styled.div`\n  background-size: cover;\n  background-position: center;\n  background-attachment: fixed;\n  position: fixed;\n  z-index: -1;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100vh;\n  filter: blur(7px);\n`;\n\nconst BlogPost = (props: { data: QueryData }) => {\n  const { data } = props;\n  const { site, post } = data;\n\n  return (\n    <WideLayout>\n      <Helmet>\n        <title>{site.siteMetadata.title} | {post.frontmatter.title}</title>\n      </Helmet>\n\n      <Wrapper>\n        <BackgroundImage\n          style={{\n            backgroundImage: `url('/images/screenshot_3840x2160_2020-07-19_12-44-15.jpg')`\n          }}\n        />\n\n        <div style={{background: 'linear-gradient(transparent, transparent', padding: '150px 0 10em'}}>\n          {/* <PostsList /> */}\n          <PostPreview data={data} />\n        </div>\n      </Wrapper>\n    </WideLayout>\n  );\n};\n\nexport const query = graphql`\n  query($slug: String!, $absolutePathRegex: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    post: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        video\n        gifItems {\n          src\n          description\n        }\n        gifItemsGroups {\n          title\n          description\n          gifItems {\n            src\n            description\n          }\n        }\n        screenshotsGroups {\n          src\n          title\n          description\n        }\n        thumbnail {\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n    allFile(\n      filter: {\n        extension: { regex: \"/(jpg)|(png)|(tif)|(tiff)|(webp)|(jpeg)/\" }\n        absolutePath: { regex: $absolutePathRegex }\n      }\n    ) {\n      images: edges {\n        image: node {\n          absolutePath\n          childImageSharp {\n            fluid {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default BlogPost;\n"],"sourceRoot":""}